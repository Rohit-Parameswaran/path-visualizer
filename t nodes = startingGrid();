[1mdiff --git a/src/pathvisualizer/PathVisualizer.js b/src/pathvisualizer/PathVisualizer.js[m
[1mindex 656c9d1..3907b39 100644[m
[1m--- a/src/pathvisualizer/PathVisualizer.js[m
[1m+++ b/src/pathvisualizer/PathVisualizer.js[m
[36m@@ -16,6 +16,7 @@[m [mexport default class PathVisualizer extends Component {[m
     this.state = {[m
       grid: [],[m
       isMouseActive: false,[m
[32m+[m[32m      selectedNode: "",[m
     };[m
   }[m
 [m
[36m@@ -24,6 +25,11 @@[m [mexport default class PathVisualizer extends Component {[m
     this.setState({ grid: nodes });[m
   }[m
 [m
[32m+[m[32m  // componentDidUpdate() {[m
[32m+[m[32m  //   const nodes = startingGrid();[m
[32m+[m[32m  //   this.setState({ grid: nodes });[m
[32m+[m[32m  // }[m
[32m+[m
   animateShortestPath(requiredPath) {[m
     for (let i = 0; i < requiredPath.length; ++i) {[m
       setTimeout(() => {[m
[36m@@ -62,6 +68,12 @@[m [mexport default class PathVisualizer extends Component {[m
   };[m
 [m
   handleMouseDown = (row, col) => {[m
[32m+[m[32m    if (row == startRow && col == startCol) {[m
[32m+[m[32m      this.setState({ selectedNode: "start" });[m
[32m+[m[32m    } else if (row == endRow && col == endCol) {[m
[32m+[m[32m      this.setState({ selectedNode: "end" });[m
[32m+[m[32m    } else this.setState({ selectedNode: "wall" });[m
[32m+[m
     const newGrid = getGridWithNewWalls(this.state.grid, row, col);[m
     this.setState({[m
       grid: newGrid,[m
[36m@@ -71,7 +83,17 @@[m [mexport default class PathVisualizer extends Component {[m
 [m
   handleMouseEnter = (row, col) => {[m
     if (!this.state.isMouseActive) return;[m
[31m-    this.setState({ grid: getGridWithNewWalls(this.state.grid, row, col) });[m
[32m+[m[32m    if (this.state.selectedNode != "wall")[m
[32m+[m[32m      this.setState({[m
[32m+[m[32m        grid: changeStartorEnd([m
[32m+[m[32m          this.state.grid,[m
[32m+[m[32m          row,[m
[32m+[m[32m          col,[m
[32m+[m[32m          this.state.selectedNode[m
[32m+[m[32m        ),[m
[32m+[m[32m      });[m
[32m+[m[32m    else if (this.state.selectedNode == "wall")[m
[32m+[m[32m      this.setState({ grid: getGridWithNewWalls(this.state.grid, row, col) });[m
   };[m
 [m
   handleMouseUp = () => {[m
[36m@@ -115,6 +137,7 @@[m [mexport default class PathVisualizer extends Component {[m
           gridNodes={this.state.grid}[m
           handleMouseDown={(row, col) => this.handleMouseDown(row, col)}[m
           handleMouseUp={this.handleMouseUp}[m
[32m+[m[32m          handleMouseUp={this.handleMouseUp}[m
           handleMouseEnter={(row, col) => this.handleMouseEnter(row, col)}[m
         />[m
         {visualizebuttonMarkup}[m
[36m@@ -156,3 +179,8 @@[m [mconst getGridWithNewWalls = (grid, row, col) => {[m
   tempGrid[row][col].isWall = !tempGrid[row][col].isWall;[m
   return tempGrid;[m
 };[m
[32m+[m
[32m+[m[32m// const changeStartorEnd = (grid, row, col, startOrEnd) => {[m
[32m+[m[32m//   startRow = row;[m
[32m+[m[32m//   startCol = col;[m
[32m+[m[32m// }[m
